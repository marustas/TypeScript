function function1(a: string, b: number): boolean {
    return a.length > b.toString().length
}

class Class1 {
    a: boolean
    b: string

    constructor(a: boolean, b: string) {
        this.a = a
        this.b = b
    }
}

type A = typeof function1
type B = typeof Class1

type MyParameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never
type C = Parameters<A>
type D = MyParameters<A>

type MyConstructorParameters<T extends new (...args: any) => any>=T extends new (...args: infer P) => any ? P : never
type E = ConstructorParameters<B>
type F = MyConstructorParameters<B>

type MyRetyrnType<T extends (...args: any) => any> = T extends (...args: any) => infer P ? P : any
type G = ReturnType<A>
type H = MyRetyrnType<A>

type MyInstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer P ? P : any
type I = InstanceType<B>
type J = MyInstanceType<B>